#
from keras.preprocessing.image import ImageDataGenerator
datagen = ImageDataGenerator(
    featurewise_center=True,
    featurewise_std_normalization=True,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    horizontal_flip=True)

def get_random_affine():
    dx, dy = np.random.randint(-1.7, 1.8, 2)
    M = np.float32([[1, 0, dx], [0, 1, dy]])
    return M
    

def generator(source_path, folder_list, batch_size,validation):
    print( 'Source path = ', source_path, '; batch size =', batch_size)
    img_idx = list(range(0,30))#create a list of image numbers you want to use for a particular video
    x = len(img_idx) # number of images for each video
    y = 120          # height of each input image
    z = 120          # width of each input image
    while True:
        t = np.random.permutation(folder_list)
        num_batches = len(folder_list) // batch_size # calculate the number of batches
        for batch in range(num_batches): # we iterate over the number of batches
            batch_data = np.zeros((batch_size,x,y,z,3))# x is the number of images you use for each video, (y,z) is the final size of the input images and 3 is the number of channels RGB
            aug_data = np.zeros((batch_size,x,y,z,3))
            #aug = np.zeros((batch_size,2*x,y,z,3))
            batch_labels = np.zeros((batch_size,5))# batch_labels is the one hot representation of the output
            aug_labels = np.zeros((batch_size,5))
            for folder in range(batch_size): # iterate over the batch_size
                imgs = os.listdir(source_path+'/'+ t[folder + (batch*batch_size)].split(';')[0]) # read all the images in the folder
                
                # random affine to be used in image transformation for buidling agumented data set
                M = get_random_affine()
                
                for idx,item in enumerate(img_idx): #  Iterate iver the frames/images of a folder to read them in
                    
                    #image = imread(source_path+'/'+ t[folder + (batch*batch_size)].strip().split(';')[0]+'/'+imgs[item]).astype(np.float32)
                    image = cv2.imread(source_path+'/'+ t[folder + (batch*batch_size)].strip().split(';')[0]+'/'+imgs[item], cv2.IMREAD_COLOR)
                    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
                    #crop the images and resize them. Note that the images are of 2 different shape 
                    #and the conv3D will throw error if the inputs in a batch have different shapes
                    image = cv2.resize(image, (y, z),interpolation = cv2.INTER_AREA)
                    batch_data[folder,idx] = (image/255)
                    
                    #batch_data[folder,idx,:,:,0] = image[:,:,0]/255#normalise and feed in the image
                    #batch_data[folder,idx,:,:,1] = image[:,:,1]/255#normalise and feed in the image
                    #batch_data[folder,idx,:,:,2] = image[:,:,2]/255#normalise and feed in the image
                    
                    # data augmentation
                    #Data with affine transformation
                    aug_data[folder,idx] = (cv2.warpAffine(image, M, (120, 120)))
                    
                batch_labels[folder, int(t[folder + (batch*batch_size)].strip().split(';')[2])] = 1
                aug_labels[folder, int(t[folder + (batch*batch_size)].strip().split(';')[2])] = 1
            
            batch_data_final = np.append(batch_data, aug_data, axis = 0)
            batch_labels_final = np.append(batch_labels, aug_labels, axis = 0)
            
            if source_path.endswith("val"):
                batch_data_final=batch_data
                batch_labels_final= batch_labels

            yield batch_data_final, batch_labels_final #you yield the batch_data and the batch_labels, remember what does yield do

        
        # write the code for the remaining data points which are left after full batches
        start_idx = batch_size*num_batches
        if (len(folder_list) != start_idx):
            batch_size = len(folder_list) - (batch_size*num_batches)
            batch_data = np.zeros((batch_size,x,y,z,3))# x is the number of images you use for each video, (y,z) is the final size of the input images and 3 is the number of channels RGB
            aug_data = np.zeros((batch_size,x,y,z,3))
            #aug = np.zeros((batch_size,2*x,y,z,3))
            batch_labels = np.zeros((batch_size,5))# batch_labels is the one hot representation of the output
            aug_labels = np.zeros((batch_size,5))
            for folder in range(batch_size): # iterate over the batch_size
                imgs = os.listdir(source_path+'/'+ t[folder + (start_idx)].split(';')[0]) # read all the images in the folder
                
                # random affine to be used in image transformation for buidling agumented data set
                M = get_random_affine()
                
                for idx,item in enumerate(img_idx): #  Iterate iver the frames/images of a folder to read them in
                    
                    #image = imread(source_path+'/'+ t[folder + (batch*batch_size)].strip().split(';')[0]+'/'+imgs[item]).astype(np.float32)
                    image = cv2.imread(source_path+'/'+ t[folder + (start_idx)].strip().split(';')[0]+'/'+imgs[item], cv2.IMREAD_COLOR)
                    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
                    #crop the images and resize them. Note that the images are of 2 different shape 
                    #and the conv3D will throw error if the inputs in a batch have different shapes
                    image = cv2.resize(image, (y, z),interpolation = cv2.INTER_AREA)
                    batch_data[folder,idx] = (image/255)
                    
                    #batch_data[folder,idx,:,:,0] = image[:,:,0]/255#normalise and feed in the image
                    #batch_data[folder,idx,:,:,1] = image[:,:,1]/255#normalise and feed in the image
                    #batch_data[folder,idx,:,:,2] = image[:,:,2]/255#normalise and feed in the image
                    
                    # data augmentation
                    #Data with affine transformation
                    aug_data[folder,idx] = (cv2.warpAffine(image, M, (120, 120)))
                    
                batch_labels[folder, int(t[folder + (start_idx)].strip().split(';')[2])] = 1
                aug_labels[folder, int(t[folder + (start_idx)].strip().split(';')[2])] = 1
            
            batch_data_final = np.append(batch_data, aug_data, axis = 0)
            batch_labels_final = np.append(batch_labels, aug_labels, axis = 0)
            
            if validation:
                batch_data_final=batch_data
                batch_labels_final= batch_labels

            yield batch_data_final, batch_labels_final #you yield the batch_data and the batch_labels, remember what does yield do
